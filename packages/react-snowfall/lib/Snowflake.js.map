{"version":3,"file":"Snowflake.js","names":["defaultConfig","color","radius","speed","wind","changeFrequency","Snowflake","canvas","config","updateConfig","images","params","x","random","offsetWidth","y","offsetHeight","rotation","nextSpeed","nextWind","nextRotation","framesSinceLastUpdate","length","image","randomElement","undefined","previousConfig","isEqual","selectImage","framesPassed","lerp","updateTargetParams","ctx","save","translate","rotate","Math","PI","drawImage","beginPath","arc","fillStyle","closePath","fill","restore"],"sources":["../src/Snowflake.ts"],"sourcesContent":["import isEqual from 'react-fast-compare'\r\nimport { lerp, random, randomElement } from './utils'\r\n\r\nexport type SnowflakeImageInput =\r\n  | HTMLImageElement\r\n  | SVGImageElement\r\n  | HTMLVideoElement\r\n  | HTMLCanvasElement\r\n  | ImageBitmap\r\n\r\nexport interface SnowflakeProps {\r\n  /** The color of the snowflake, can be any valid CSS color. */\r\n  color: string\r\n  /**\r\n   * The minimum and maximum radius of the snowflake, will be\r\n   * randomly selected within this range.\r\n   *\r\n   * The default value is `[0.5, 3.0]`.\r\n   */\r\n  radius: [number, number]\r\n  /**\r\n   * The minimum and maximum speed of the snowflake.\r\n   *\r\n   * The speed determines how quickly the snowflake moves\r\n   * along the y axis (vertical speed).\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[1.0, 3.0]`.\r\n   */\r\n  speed: [number, number]\r\n  /**\r\n   * The minimum and maximum wind of the snowflake.\r\n   *\r\n   * The wind determines how quickly the snowflake moves\r\n   * along the x axis (horizontal speed).\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[-0.5, 2.0]`.\r\n   */\r\n  wind: [number, number]\r\n  /**\r\n   * The frequency in frames that the wind and speed values\r\n   * will update.\r\n   *\r\n   * The default value is 200.\r\n   */\r\n  changeFrequency: number\r\n  /**\r\n   * An array of images that will be rendered as the snowflakes instead\r\n   * of the default circle shapes.\r\n   */\r\n  images?: SnowflakeImageInput[]\r\n}\r\n\r\nexport type SnowflakeConfig = Partial<SnowflakeProps>\r\n\r\nexport const defaultConfig: SnowflakeProps = {\r\n  color: '#dee4fd',\r\n  radius: [0.5, 3.0],\r\n  speed: [1.0, 3.0],\r\n  wind: [-0.5, 2.0],\r\n  changeFrequency: 200,\r\n}\r\n\r\ninterface SnowflakeParams {\r\n  x: number\r\n  y: number\r\n  radius: number\r\n  rotation: number\r\n  speed: number\r\n  wind: number\r\n  nextSpeed: number\r\n  nextWind: number\r\n  nextRotation: number\r\n}\r\n\r\n/**\r\n * An individual snowflake that will update it's location every call to `update`\r\n * and draw itself to the canvas every call to `draw`.\r\n */\r\nclass Snowflake {\r\n  private config!: SnowflakeProps\r\n  private params: SnowflakeParams\r\n  private framesSinceLastUpdate: number\r\n  private image?: SnowflakeImageInput\r\n\r\n  public constructor(canvas: HTMLCanvasElement, config: SnowflakeConfig = {}) {\r\n    // Set custom config\r\n    this.updateConfig(config)\r\n\r\n    // Setting initial parameters\r\n    const { radius, wind, speed, images } = this.config\r\n\r\n    this.params = {\r\n      x: random(0, canvas.offsetWidth),\r\n      y: random(-canvas.offsetHeight, 0),\r\n      rotation: random(0, 360),\r\n      radius: random(...radius),\r\n      speed: random(...speed),\r\n      wind: random(...wind),\r\n      nextSpeed: random(...wind),\r\n      nextWind: random(...speed),\r\n      nextRotation: random(0, 360),\r\n    }\r\n\r\n    this.framesSinceLastUpdate = 0\r\n  }\r\n\r\n  private selectImage() {\r\n    if (this.config.images && this.config.images.length > 0) {\r\n      this.image = randomElement(this.config.images)\r\n    } else {\r\n      this.image = undefined\r\n    }\r\n  }\r\n\r\n  public updateConfig(config: SnowflakeConfig): void {\r\n    const previousConfig = this.config\r\n    this.config = { ...defaultConfig, ...config }\r\n\r\n    // Update the radius if the config has changed, it won't gradually update on it's own\r\n    if (this.params && !isEqual(this.config.radius, previousConfig?.radius)) {\r\n      this.params.radius = random(...this.config.radius)\r\n    }\r\n\r\n    if (!isEqual(this.config.images, previousConfig?.images)) {\r\n      this.selectImage()\r\n    }\r\n  }\r\n\r\n  private updateTargetParams(): void {\r\n    this.params.nextSpeed = random(...this.config.speed)\r\n    this.params.nextWind = random(...this.config.wind)\r\n    this.params.nextRotation = random(0, 360)\r\n  }\r\n\r\n  public update(canvas: HTMLCanvasElement, framesPassed = 1): void {\r\n    const { x, y, rotation, nextRotation, wind, speed, nextWind, nextSpeed } = this.params\r\n\r\n    // Update current location, wrapping around if going off the canvas\r\n    this.params.x = (x + wind * framesPassed) % canvas.offsetWidth\r\n    this.params.y = (y + speed * framesPassed) % canvas.offsetHeight\r\n\r\n    // Update the wind and speed towards the desired values\r\n    this.params.speed = lerp(speed, nextSpeed, 0.01)\r\n    this.params.wind = lerp(wind, nextWind, 0.01)\r\n    this.params.rotation = lerp(rotation, nextRotation, 0.01)\r\n\r\n    if (this.framesSinceLastUpdate++ > this.config.changeFrequency) {\r\n      this.updateTargetParams()\r\n      this.framesSinceLastUpdate = 0\r\n    }\r\n  }\r\n\r\n  public draw(ctx: CanvasRenderingContext2D): void {\r\n    ctx.save()\r\n    ctx.translate(this.params.x, this.params.y)\r\n\r\n    if (this.image) {\r\n      ctx.rotate((this.params.rotation * Math.PI) / 180)\r\n      ctx.drawImage(\r\n        this.image,\r\n        -this.params.radius / 2,\r\n        -this.params.radius / 2,\r\n        this.params.radius,\r\n        this.params.radius,\r\n      )\r\n    } else {\r\n      ctx.beginPath()\r\n      ctx.arc(0, 0, this.params.radius, 0, 2 * Math.PI)\r\n      ctx.fillStyle = this.config.color\r\n      ctx.closePath()\r\n      ctx.fill()\r\n    }\r\n\r\n    ctx.restore()\r\n  }\r\n}\r\n\r\nexport default Snowflake\r\n"],"mappings":"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"}